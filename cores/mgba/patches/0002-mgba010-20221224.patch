From 38ad547a1b695f994c6632de0493c422750ffe0a Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Tue, 11 Oct 2022 22:24:06 -0700
Subject: [PATCH 01/37] CMake: Bump verison

---
 version.cmake | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/version.cmake b/version.cmake
index e66142fbd..6e944fb6c 100644
--- a/version.cmake
+++ b/version.cmake
@@ -3,7 +3,7 @@ if(NOT PROJECT_NAME)
 endif()
 set(LIB_VERSION_MAJOR 0)
 set(LIB_VERSION_MINOR 10)
-set(LIB_VERSION_PATCH 0)
+set(LIB_VERSION_PATCH 1)
 set(LIB_VERSION_ABI 0.10)
 set(LIB_VERSION_STRING ${LIB_VERSION_MAJOR}.${LIB_VERSION_MINOR}.${LIB_VERSION_PATCH})
 set(SUMMARY "${PROJECT_NAME} Game Boy Advance Emulator")

From 15f649b78f2adad9e7693638a4b8ffa30e19265c Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Fri, 14 Oct 2022 21:33:38 -0700
Subject: [PATCH 02/37] Res: Fix species name location in Ruby/Sapphire revs
 1/2 (fixes #2685)

---
 CHANGES                 |  4 ++++
 res/scripts/pokemon.lua | 18 ++++++++++++++++++
 2 files changed, 22 insertions(+)

diff --git a/CHANGES b/CHANGES
index bab536240..b5df6a2be 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,3 +1,7 @@
+0.10.1: (Future)
+Other fixes:
+ - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)
+
 0.10.0: (2022-10-11)
 Features:
  - Preliminary Lua scripting support
diff --git a/res/scripts/pokemon.lua b/res/scripts/pokemon.lua
index 7ebe54bb8..d909396d0 100644
--- a/res/scripts/pokemon.lua
+++ b/res/scripts/pokemon.lua
@@ -412,6 +412,13 @@ local gameRubyEn = Generation3En:new{
 	_speciesNameTable=0x1f716c,
 }
 
+local gameRubyEnR1 = Generation3En:new{
+	name="Ruby (USA)",
+	_party=0x3004360,
+	_partyCount=0x3004350,
+	_speciesNameTable=0x1f7184,
+}
+
 local gameSapphireEn = Generation3En:new{
 	name="Sapphire (USA)",
 	_party=0x3004360,
@@ -419,6 +426,13 @@ local gameSapphireEn = Generation3En:new{
 	_speciesNameTable=0x1f70fc,
 }
 
+local gameSapphireEnR1 = Generation3En:new{
+	name="Sapphire (USA)",
+	_party=0x3004360,
+	_partyCount=0x3004350,
+	_speciesNameTable=0x1f7114,
+}
+
 local gameEmeraldEn = Generation3En:new{
 	name="Emerald (USA)",
 	_party=0x20244ec,
@@ -471,6 +485,10 @@ gameCrc32 = {
 	[0x7d527d62] = gameYellowEn,
 	[0x84ee4776] = gameFireRedEnR1,
 	[0xdaffecec] = gameLeafGreenEnR1,
+	[0x61641576] = gameRubyEnR1, -- Rev 1
+	[0xaeac73e6] = gameRubyEnR1, -- Rev 2
+	[0xbafedae5] = gameSapphireEnR1, -- Rev 1
+	[0x9cc4410e] = gameSapphireEnR1, -- Rev 2
 }
 
 function printPartyStatus(game, buffer)

From ed9fe53557e021ad94f160c175ee000636c30f9e Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Fri, 14 Oct 2022 23:23:37 -0700
Subject: [PATCH 03/37] Qt: Manually split filename to avoid overzealous
 splitting (fixes #2681)

---
 CHANGES                                |  1 +
 src/platform/qt/ApplicationUpdater.cpp | 10 +++++++++-
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/CHANGES b/CHANGES
index b5df6a2be..36adbc375 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,5 +1,6 @@
 0.10.1: (Future)
 Other fixes:
+ - Qt: Manually split filename to avoid overzealous splitting (fixes mgba.io/i/2681)
  - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)
 
 0.10.0: (2022-10-11)
diff --git a/src/platform/qt/ApplicationUpdater.cpp b/src/platform/qt/ApplicationUpdater.cpp
index ce752ecce..f26e58101 100644
--- a/src/platform/qt/ApplicationUpdater.cpp
+++ b/src/platform/qt/ApplicationUpdater.cpp
@@ -137,7 +137,15 @@ QUrl ApplicationUpdater::parseManifest(const QByteArray& manifest) {
 QString ApplicationUpdater::destination() const {
 	QFileInfo path(updateInfo().url.path());
 	QDir dir(ConfigController::configDir());
-	return dir.filePath(QLatin1String("update.") + path.completeSuffix());
+	// QFileInfo::completeSuffix will eat all .'s in the filename...including
+	// ones in the version string, turning mGBA-1.0.0-win32.7z into
+	// 0.0-win32.7z instead of the intended .7z
+	// As a result, so we have to split out the complete suffix manually.
+	QString suffix(path.suffix());
+	if (path.completeBaseName().endsWith(".tar")) {
+		suffix = "tar." + suffix;
+	}
+	return dir.filePath(QLatin1String("update.") + suffix);
 }
 
 const char* ApplicationUpdater::platform() {

From 270e72f1260d44dd6e7dcd391dbdb922b167e0e3 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Fri, 14 Oct 2022 23:35:32 -0700
Subject: [PATCH 04/37] Qt: Expand criteria for tag branch names (fixes #2679)

---
 CHANGES                                | 1 +
 src/platform/qt/ApplicationUpdater.cpp | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/CHANGES b/CHANGES
index 36adbc375..f4a1bc032 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,6 +1,7 @@
 0.10.1: (Future)
 Other fixes:
  - Qt: Manually split filename to avoid overzealous splitting (fixes mgba.io/i/2681)
+ - Qt: Expand criteria for tag branch names (fixes mgba.io/i/2679)
  - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)
 
 0.10.0: (2022-10-11)
diff --git a/src/platform/qt/ApplicationUpdater.cpp b/src/platform/qt/ApplicationUpdater.cpp
index f26e58101..4225bd7ee 100644
--- a/src/platform/qt/ApplicationUpdater.cpp
+++ b/src/platform/qt/ApplicationUpdater.cpp
@@ -73,7 +73,7 @@ QStringList ApplicationUpdater::listChannels() {
 QString ApplicationUpdater::currentChannel() {
 	QLatin1String version(projectVersion);
 	QLatin1String branch(gitBranch);
-	if (branch == QLatin1String("heads/") + version) {
+	if (branch == QLatin1String("heads/") + version || branch == version) {
 		return QLatin1String("stable");
 	} else {
 		return QLatin1String("dev");

From 5acdf6875eb2a85da980b72d6a72f290048f5b25 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sun, 16 Oct 2022 01:31:01 -0700
Subject: [PATCH 05/37] Qt: Add missing Sachen MMC2 mapper

---
 src/platform/qt/GameBoy.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/platform/qt/GameBoy.cpp b/src/platform/qt/GameBoy.cpp
index e0271d322..3085a9ff0 100644
--- a/src/platform/qt/GameBoy.cpp
+++ b/src/platform/qt/GameBoy.cpp
@@ -39,6 +39,7 @@ static const QList<GBMemoryBankControllerType> s_mbcList{
 	GB_UNL_BBD,
 	GB_UNL_HITEK,
 	GB_UNL_SACHEN_MMC1,
+	GB_UNL_SACHEN_MMC2,
 };
 
 static QMap<GBModel, QString> s_gbModelNames;

From 273014b9e2501f97e9525af65a5af5c8a2c5b66b Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sun, 16 Oct 2022 03:29:36 -0700
Subject: [PATCH 06/37] README: Add MBC30 to the supported mappers list (closes
 #2686)

---
 README.md | 1 +
 1 file changed, 1 insertion(+)

diff --git a/README.md b/README.md
index 2d8837c53..4dfe0940f 100644
--- a/README.md
+++ b/README.md
@@ -50,6 +50,7 @@ The following mappers are fully supported:
 - MBC2
 - MBC3
 - MBC3+RTC
+- MBC30
 - MBC5
 - MBC5+Rumble
 - MBC7

From 332dc7575a21e107216a3bb762ab0c79d7806568 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sun, 16 Oct 2022 22:14:46 -0700
Subject: [PATCH 07/37] Qt: Fix e-Reader scanning function reentry (fixes
 #2693)

---
 CHANGES                            | 1 +
 src/platform/qt/CoreController.cpp | 6 +++++-
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/CHANGES b/CHANGES
index f4a1bc032..93418919c 100644
--- a/CHANGES
+++ b/CHANGES
@@ -2,6 +2,7 @@
 Other fixes:
  - Qt: Manually split filename to avoid overzealous splitting (fixes mgba.io/i/2681)
  - Qt: Expand criteria for tag branch names (fixes mgba.io/i/2679)
+ - Qt: Fix scanning specific e-Reader dotcodes (fixes mgba.io/i/2693)
  - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)
 
 0.10.0: (2022-10-11)
diff --git a/src/platform/qt/CoreController.cpp b/src/platform/qt/CoreController.cpp
index 61774de71..37fc1b01f 100644
--- a/src/platform/qt/CoreController.cpp
+++ b/src/platform/qt/CoreController.cpp
@@ -914,7 +914,10 @@ void CoreController::scanCard(const QString& path) {
 		if (!file.open(QIODevice::ReadOnly)) {
 			return;
 		}
-		m_eReaderData = file.read(2912);
+		QByteArray eReaderData = file.read(2912);
+		if (eReaderData.isEmpty()) {
+			return;
+		}
 
 		file.seek(0);
 		QStringList lines;
@@ -936,6 +939,7 @@ void CoreController::scanCard(const QString& path) {
 			}
 		}
 		scanCards(lines);
+		m_eReaderData = eReaderData;
 	} else if (image.size() == QSize(989, 44) || image.size() == QSize(639, 44)) {
 		const uchar* bits = image.constBits();
 		size_t size;

From 061530b5d850b8fdf704cf39a140a5aaf63d54fd Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Tue, 18 Oct 2022 01:39:15 -0700
Subject: [PATCH 08/37] GB Serialize: Don't write BGP/OBP when loading SCGB
 state (fixes #2694)

---
 CHANGES     | 2 ++
 src/gb/io.c | 2 +-
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/CHANGES b/CHANGES
index 93418919c..df09502d4 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,4 +1,6 @@
 0.10.1: (Future)
+Emulation fixes:
+ - GB Serialize: Don't write BGP/OBP when loading SCGB state (fixes mgba.io/i/2694)
 Other fixes:
  - Qt: Manually split filename to avoid overzealous splitting (fixes mgba.io/i/2681)
  - Qt: Expand criteria for tag branch names (fixes mgba.io/i/2679)
diff --git a/src/gb/io.c b/src/gb/io.c
index c6ad66c36..06a7927cd 100644
--- a/src/gb/io.c
+++ b/src/gb/io.c
@@ -754,7 +754,7 @@ void GBIODeserialize(struct GB* gb, const struct GBSerializedState* state) {
 	gb->video.renderer->writeVideoRegister(gb->video.renderer, GB_REG_SCX, state->io[GB_REG_SCX]);
 	gb->video.renderer->writeVideoRegister(gb->video.renderer, GB_REG_WY, state->io[GB_REG_WY]);
 	gb->video.renderer->writeVideoRegister(gb->video.renderer, GB_REG_WX, state->io[GB_REG_WX]);
-	if (gb->model & GB_MODEL_SGB) {
+	if (gb->model == GB_MODEL_SGB) {
 		gb->video.renderer->writeVideoRegister(gb->video.renderer, GB_REG_BGP, state->io[GB_REG_BGP]);
 		gb->video.renderer->writeVideoRegister(gb->video.renderer, GB_REG_OBP0, state->io[GB_REG_OBP0]);
 		gb->video.renderer->writeVideoRegister(gb->video.renderer, GB_REG_OBP1, state->io[GB_REG_OBP1]);

From 0d1b0ea8e9187ae267081baf4418f3f38664ebee Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sat, 15 Oct 2022 16:47:49 -0700
Subject: [PATCH 09/37] macOS: Add category to plist (closes #2691)

---
 CHANGES           | 2 ++
 res/info.plist.in | 2 ++
 2 files changed, 4 insertions(+)

diff --git a/CHANGES b/CHANGES
index df09502d4..8b6d94bd7 100644
--- a/CHANGES
+++ b/CHANGES
@@ -6,6 +6,8 @@ Other fixes:
  - Qt: Expand criteria for tag branch names (fixes mgba.io/i/2679)
  - Qt: Fix scanning specific e-Reader dotcodes (fixes mgba.io/i/2693)
  - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)
+Misc:
+ - macOS: Add category to plist (closes mgba.io/i/2691)
 
 0.10.0: (2022-10-11)
 Features:
diff --git a/res/info.plist.in b/res/info.plist.in
index f37904dee..eb625299c 100644
--- a/res/info.plist.in
+++ b/res/info.plist.in
@@ -56,5 +56,7 @@
 			<string>Viewer</string>
 		</dict>
 	</array>
+	<key>LSApplicationCategoryType</key>
+	<string>public.app-category.games</string>
 </dict>
 </plist>

From f94e18e63b8778d375108b942f6b72f109f2bb5c Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Wed, 19 Oct 2022 04:15:41 -0700
Subject: [PATCH 10/37] Qt: Keep track of current pslette preset name (fixes
 #2680)

---
 CHANGES                          | 1 +
 src/platform/qt/SettingsView.cpp | 8 +++++++-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/CHANGES b/CHANGES
index 8b6d94bd7..9adbe41c3 100644
--- a/CHANGES
+++ b/CHANGES
@@ -8,6 +8,7 @@ Other fixes:
  - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)
 Misc:
  - macOS: Add category to plist (closes mgba.io/i/2691)
+ - Qt: Keep track of current pslette preset name (fixes mgba.io/i/2680)
 
 0.10.0: (2022-10-11)
 Features:
diff --git a/src/platform/qt/SettingsView.cpp b/src/platform/qt/SettingsView.cpp
index 570b15d6c..cba481dc8 100644
--- a/src/platform/qt/SettingsView.cpp
+++ b/src/platform/qt/SettingsView.cpp
@@ -296,9 +296,14 @@ SettingsView::SettingsView(ConfigController* controller, InputController* inputC
 	}
 
 	const GBColorPreset* colorPresets;
+	QString usedPreset = m_controller->getQtOption("gb.pal").toString();
 	size_t nPresets = GBColorPresetList(&colorPresets);
 	for (size_t i = 0; i < nPresets; ++i) {
-		m_ui.colorPreset->addItem(QString(colorPresets[i].name));
+		QString presetName(colorPresets[i].name);
+		m_ui.colorPreset->addItem(presetName);
+		if (usedPreset == presetName) {
+			m_ui.colorPreset->setCurrentIndex(i);
+		}
 	}
 	connect(m_ui.colorPreset, static_cast<void (QComboBox::*)(int)>(&QComboBox::currentIndexChanged), this, [this, colorPresets](int n) {
 		const GBColorPreset* preset = &colorPresets[n];
@@ -640,6 +645,7 @@ void SettingsView::updateConfig() {
 		m_controller->setOption(color.toUtf8().constData(), m_gbColors[colorId] & ~0xFF000000);
 
 	}
+	m_controller->setQtOption("gb.pal", m_ui.colorPreset->currentText());
 
 	int gbColors = GB_COLORS_CGB;
 	if (m_ui.gbColor->isChecked()) {

From 5f976f62a9841daea290b609fc8666cb3e9cc02f Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Thu, 20 Oct 2022 20:11:19 -0700
Subject: [PATCH 11/37] macOS: Fix modern build with libepoxy (fixes #2700)

---
 CHANGES        | 1 +
 CMakeLists.txt | 8 ++++++--
 2 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/CHANGES b/CHANGES
index 9adbe41c3..3eda3187f 100644
--- a/CHANGES
+++ b/CHANGES
@@ -8,6 +8,7 @@ Other fixes:
  - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)
 Misc:
  - macOS: Add category to plist (closes mgba.io/i/2691)
+ - macOS: Fix modern build with libepoxy (fixes mgba.io/i/2700)
  - Qt: Keep track of current pslette preset name (fixes mgba.io/i/2680)
 
 0.10.0: (2022-10-11)
diff --git a/CMakeLists.txt b/CMakeLists.txt
index ce8e4d687..a00e93371 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -718,8 +718,12 @@ if (USE_LZMA)
 endif()
 
 if(USE_EPOXY)
-	list(APPEND FEATURE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gl.c ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gles2.c)
-	list(APPEND FEATURE_DEFINES BUILD_GL BUILD_GLES2 BUILD_GLES3)
+	if(NOT APPLE OR NOT MACOSX_SDK VERSION_GREATER 10.14)
+		list(APPEND FEATURE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gl.c)
+		list(APPEND FEATURE_DEFINES BUILD_GL)
+	endif()
+	list(APPEND FEATURE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gles2.c)
+	list(APPEND FEATURE_DEFINES BUILD_GLES2 BUILD_GLES3)
 	list(APPEND FEATURES EPOXY)
 	include_directories(AFTER ${EPOXY_INCLUDE_DIRS})
 	link_directories(${EPOXY_LIBRARY_DIRS})

From a1e1a67320837786fb3b51a152517f5161175273 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Thu, 27 Oct 2022 02:24:39 -0700
Subject: [PATCH 12/37] Updater: Fix mUpdaterGetUpdateForChannel

---
 src/feature/updater.c | 9 +--------
 1 file changed, 1 insertion(+), 8 deletions(-)

diff --git a/src/feature/updater.c b/src/feature/updater.c
index 442a71648..e9f47f440 100644
--- a/src/feature/updater.c
+++ b/src/feature/updater.c
@@ -78,14 +78,7 @@ static void _updateMatch(const char* key, const char* value, void* user) {
 		return;
 	}
 	const char* item = &key[dotLoc + 1];
-
-	struct Table* out = user;
-	struct mUpdate* update = HashTableLookup(out, match->channel);
-	if (!update) {
-		update = calloc(1, sizeof(*update));
-		HashTableInsert(out, match->channel, update);
-	}
-	_updateUpdate(update, item, value);
+	_updateUpdate(match->out, item, value);
 }
 
 bool mUpdaterInit(struct mUpdaterContext* context, const char* manifest) {

From b9058ecdda6767dcba71b7dbcae74bb833d4e7f7 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sat, 29 Oct 2022 01:38:34 -0700
Subject: [PATCH 13/37] VFS: Fix minizip write returning 0 on success instead
 of size

---
 CHANGES                | 1 +
 src/util/vfs/vfs-zip.c | 6 +++++-
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/CHANGES b/CHANGES
index 3eda3187f..b021866d4 100644
--- a/CHANGES
+++ b/CHANGES
@@ -6,6 +6,7 @@ Other fixes:
  - Qt: Expand criteria for tag branch names (fixes mgba.io/i/2679)
  - Qt: Fix scanning specific e-Reader dotcodes (fixes mgba.io/i/2693)
  - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)
+ - VFS: Fix minizip write returning 0 on success instead of size
 Misc:
  - macOS: Add category to plist (closes mgba.io/i/2691)
  - macOS: Fix modern build with libepoxy (fixes mgba.io/i/2700)
diff --git a/src/util/vfs/vfs-zip.c b/src/util/vfs/vfs-zip.c
index 2d353c566..2f8234b94 100644
--- a/src/util/vfs/vfs-zip.c
+++ b/src/util/vfs/vfs-zip.c
@@ -593,7 +593,11 @@ ssize_t _vfzRead(struct VFile* vf, void* buffer, size_t size) {
 
 ssize_t _vfzWrite(struct VFile* vf, const void* buffer, size_t size) {
 	struct VFileZip* vfz = (struct VFileZip*) vf;
-	return zipWriteInFileInZip(vfz->z, buffer, size);
+	int res = zipWriteInFileInZip(vfz->z, buffer, size);
+	if (res != ZIP_OK) {
+		return res;
+	}
+	return size;
 }
 
 void* _vfzMap(struct VFile* vf, size_t size, int flags) {

From 9dea2e61982cdbe066f7991110876cf5dcfd5230 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Mon, 7 Nov 2022 20:43:22 -0800
Subject: [PATCH 14/37] GBA Video: Ignore disabled backgrounds as OBJ blend
 target (fixes #2489)

---
 CHANGES                                          |   1 +
 .../baseline_0000.png                            | Bin 0 -> 2190 bytes
 .../blend/disabled-bg-semitrans-blend/config.ini |   3 +++
 .../blend/disabled-bg-semitrans-blend/test.gba   | Bin 0 -> 5288 bytes
 src/gba/renderers/software-obj.c                 |   8 ++++----
 5 files changed, 8 insertions(+), 4 deletions(-)
 create mode 100644 cinema/gba/blend/disabled-bg-semitrans-blend/baseline_0000.png
 create mode 100644 cinema/gba/blend/disabled-bg-semitrans-blend/config.ini
 create mode 100644 cinema/gba/blend/disabled-bg-semitrans-blend/test.gba

diff --git a/CHANGES b/CHANGES
index b021866d4..4c7ec5430 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,6 +1,7 @@
 0.10.1: (Future)
 Emulation fixes:
  - GB Serialize: Don't write BGP/OBP when loading SCGB state (fixes mgba.io/i/2694)
+ - GBA Video: Ignore disabled backgrounds as OBJ blend target (fixes mgba.io/i/2489)
 Other fixes:
  - Qt: Manually split filename to avoid overzealous splitting (fixes mgba.io/i/2681)
  - Qt: Expand criteria for tag branch names (fixes mgba.io/i/2679)
diff --git a/cinema/gba/blend/disabled-bg-semitrans-blend/baseline_0000.png b/cinema/gba/blend/disabled-bg-semitrans-blend/baseline_0000.png
new file mode 100644
index 0000000000000000000000000000000000000000..f90f448c4f4370b0457759cc9891539d6d667ded
GIT binary patch
literal 2190
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

literal 0
HcmV?d00001

diff --git a/cinema/gba/blend/disabled-bg-semitrans-blend/config.ini b/cinema/gba/blend/disabled-bg-semitrans-blend/config.ini
new file mode 100644
index 000000000..f26f6d8b1
--- /dev/null
+++ b/cinema/gba/blend/disabled-bg-semitrans-blend/config.ini
@@ -0,0 +1,3 @@
+[testinfo]
+skip=10
+frames=1
diff --git a/cinema/gba/blend/disabled-bg-semitrans-blend/test.gba b/cinema/gba/blend/disabled-bg-semitrans-blend/test.gba
new file mode 100644
index 0000000000000000000000000000000000000000..91cb67e5f614b4a906973c9741a331d7a7bae870
GIT binary patch
literal 5288
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
C4c~nL

literal 0
HcmV?d00001

diff --git a/src/gba/renderers/software-obj.c b/src/gba/renderers/software-obj.c
index 8d67199ec..3b44d86a5 100644
--- a/src/gba/renderers/software-obj.c
+++ b/src/gba/renderers/software-obj.c
@@ -169,10 +169,10 @@ int GBAVideoSoftwareRendererPreprocessSprite(struct GBAVideoSoftwareRenderer* re
 	              (renderer->blendEffect == BLEND_BRIGHTEN || renderer->blendEffect == BLEND_DARKEN);
 	if (GBAObjAttributesAGetMode(sprite->a) == OBJ_MODE_SEMITRANSPARENT || (renderer->target1Obj && renderer->blendEffect == BLEND_ALPHA) || objwinSlowPath) {
 		int target2 = renderer->target2Bd;
-		target2 |= renderer->bg[0].target2;
-		target2 |= renderer->bg[1].target2;
-		target2 |= renderer->bg[2].target2;
-		target2 |= renderer->bg[3].target2;
+		target2 |= renderer->bg[0].target2 && renderer->bg[0].enabled;
+		target2 |= renderer->bg[1].target2 && renderer->bg[1].enabled;
+		target2 |= renderer->bg[2].target2 && renderer->bg[2].enabled;
+		target2 |= renderer->bg[3].target2 && renderer->bg[3].enabled;
 		if (target2) {
 			renderer->forceTarget1 = true;
 			flags |= FLAG_REBLEND;

From b13f3503fd4cc02d578f0ce7e4d16b1ac1063feb Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sat, 12 Nov 2022 00:35:34 -0800
Subject: [PATCH 15/37] GBA: Fix resetting key IRQ state (fixes #2716)

---
 CHANGES       | 1 +
 src/gba/gba.c | 1 +
 2 files changed, 2 insertions(+)

diff --git a/CHANGES b/CHANGES
index 4c7ec5430..61920c60b 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,6 +1,7 @@
 0.10.1: (Future)
 Emulation fixes:
  - GB Serialize: Don't write BGP/OBP when loading SCGB state (fixes mgba.io/i/2694)
+ - GBA: Fix resetting key IRQ state (fixes mgba.io/i/2716)
  - GBA Video: Ignore disabled backgrounds as OBJ blend target (fixes mgba.io/i/2489)
 Other fixes:
  - Qt: Manually split filename to avoid overzealous splitting (fixes mgba.io/i/2681)
diff --git a/src/gba/gba.c b/src/gba/gba.c
index bd0353d0c..42891500e 100644
--- a/src/gba/gba.c
+++ b/src/gba/gba.c
@@ -213,6 +213,7 @@ void GBAReset(struct ARMCore* cpu) {
 	gba->earlyExit = false;
 	gba->dmaPC = 0;
 	gba->biosStall = 0;
+	gba->keysLast = 0x400;
 	if (gba->yankedRomSize) {
 		gba->memory.romSize = gba->yankedRomSize;
 		gba->memory.romMask = toPow2(gba->memory.romSize) - 1;

From d2ad6167ea3fdfb7c2c7aaed504319a4674c3ced Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sat, 12 Nov 2022 00:45:25 -0800
Subject: [PATCH 16/37] CHANGES: Spill chicken

---
 CHANGES | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/CHANGES b/CHANGES
index 61920c60b..d4a840077 100644
--- a/CHANGES
+++ b/CHANGES
@@ -12,7 +12,7 @@ Other fixes:
 Misc:
  - macOS: Add category to plist (closes mgba.io/i/2691)
  - macOS: Fix modern build with libepoxy (fixes mgba.io/i/2700)
- - Qt: Keep track of current pslette preset name (fixes mgba.io/i/2680)
+ - Qt: Keep track of current palette preset name (fixes mgba.io/i/2680)
 
 0.10.0: (2022-10-11)
 Features:
@@ -22,7 +22,7 @@ Features:
  - Tool for converting scanned pictures of e-Reader cards to raw dotcode data
  - Options for muting when inactive, minimized, or for different players in multiplayer
  - Cheat code support in homebrew ports
- - Acclerometer and gyro support for controllers on PC
+ - Accelerometer and gyro support for controllers on PC
  - Support for combo "Super Game Boy Color" SGB + GBC ROM hacks
  - Improved support for HuC-3 mapper, including RTC
  - Support for 64 kiB SRAM saves used in some bootlegs
@@ -36,7 +36,7 @@ Emulation fixes:
  - ARM7: Fix unsigned multiply timing
  - GB: Copy logo from ROM if not running the BIOS intro (fixes mgba.io/i/2378)
  - GB: Fix HALT breaking M-cycle alignment (fixes mgba.io/i/250)
- - GB Audio: Fix channel 1/2 reseting edge cases (fixes mgba.io/i/1925)
+ - GB Audio: Fix channel 1/2 resetting edge cases (fixes mgba.io/i/1925)
  - GB Audio: Properly apply per-model audio differences
  - GB Audio: Revamp channel rendering
  - GB Audio: Fix APU re-enable timing glitch
@@ -146,7 +146,7 @@ Emulation fixes:
 Other fixes:
  - ARM Decoder: Fix decoding of lsl r0 (fixes mgba.io/i/2349)
  - FFmpeg: Don't attempt to use YUV 4:2:0 for lossless videos (fixes mgba.io/i/2084)
- - GB Video: Fix memory leak when reseting SGB games
+ - GB Video: Fix memory leak when resetting SGB games
  - GBA: Fix out of bounds ROM accesses on patched ROMs smaller than 32 MiB
  - GBA: Fix maximum tile ID in caching for 256-color modes
  - GBA Video: Fix cache updating with proxy and GL renderers
@@ -257,7 +257,7 @@ Emulation fixes:
  - GBA BIOS: Implement dummy sound driver calls
  - GBA BIOS: Improve HLE BIOS timing
  - GBA BIOS: Fix reloading video registers after reset (fixes mgba.io/i/1808)
- - GBA BIOS: Make HLE BIOS calls interruptable (fixes mgba.io/i/1711 and mgba.io/i/1823)
+ - GBA BIOS: Make HLE BIOS calls interruptible (fixes mgba.io/i/1711 and mgba.io/i/1823)
  - GBA BIOS: Fix invalid decompression bounds checking
  - GBA DMA: Linger last DMA on bus (fixes mgba.io/i/301 and mgba.io/i/1320)
  - GBA DMA: Fix ordering and timing of overlapping DMAs
@@ -273,7 +273,7 @@ Emulation fixes:
  - GBA Serialize: Fix alignment check when loading states
  - GBA SIO: Fix copying Normal mode transfer values
  - GBA SIO: Fix Normal mode being totally broken (fixes mgba.io/i/1800)
- - GBA SIO: Fix deseralizing SIO registers
+ - GBA SIO: Fix deserializing SIO registers
  - GBA SIO: Fix hanging on starting a second multiplayer window (fixes mgba.io/i/854)
  - GBA SIO: Fix Normal mode transfer start timing (fixes mgba.io/i/425)
  - GBA Timers: Fix toggling timer cascading while timer is active (fixes mgba.io/i/2043)

From 53302bde3950c71e8bc086047ae41f1ee98ab768 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sun, 20 Nov 2022 00:39:00 -0800
Subject: [PATCH 17/37] Qt: Move OpenGL proxy onto its own thread (fixes #2493)

---
 CHANGES                       |   1 +
 src/platform/qt/DisplayGL.cpp | 150 +++++++++++++++++++++++++++-------
 src/platform/qt/DisplayGL.h   |  23 ++++++
 3 files changed, 144 insertions(+), 30 deletions(-)

diff --git a/CHANGES b/CHANGES
index d4a840077..73b7ac5de 100644
--- a/CHANGES
+++ b/CHANGES
@@ -13,6 +13,7 @@ Misc:
  - macOS: Add category to plist (closes mgba.io/i/2691)
  - macOS: Fix modern build with libepoxy (fixes mgba.io/i/2700)
  - Qt: Keep track of current palette preset name (fixes mgba.io/i/2680)
+ - Qt: Move OpenGL proxy onto its own thread (fixes mgba.io/i/2493)
 
 0.10.0: (2022-10-11)
 Features:
diff --git a/src/platform/qt/DisplayGL.cpp b/src/platform/qt/DisplayGL.cpp
index e4b2af9a0..b8c0f8cd9 100644
--- a/src/platform/qt/DisplayGL.cpp
+++ b/src/platform/qt/DisplayGL.cpp
@@ -175,6 +175,11 @@ DisplayGL::DisplayGL(const QSurfaceFormat& format, QWidget* parent)
 	m_drawThread.setObjectName("Painter Thread");
 	m_painter->setThread(&m_drawThread);
 
+	m_proxyThread.setObjectName("OpenGL Proxy Thread");
+	m_proxyContext = std::make_unique<QOpenGLContext>();
+	m_proxyContext->setFormat(format);
+	connect(m_painter.get(), &PainterGL::created, this, &DisplayGL::setupProxyThread);
+
 	connect(&m_drawThread, &QThread::started, m_painter.get(), &PainterGL::create);
 	connect(m_painter.get(), &PainterGL::started, this, [this] {
 		m_hasStarted = true;
@@ -189,6 +194,11 @@ DisplayGL::~DisplayGL() {
 	QMetaObject::invokeMethod(m_painter.get(), "destroy", Qt::BlockingQueuedConnection);
 	m_drawThread.exit();
 	m_drawThread.wait();
+
+	if (m_proxyThread.isRunning()) {
+		m_proxyThread.exit();
+		m_proxyThread.wait();
+	}
 }
 
 bool DisplayGL::supportsShaders() const {
@@ -209,9 +219,6 @@ void DisplayGL::startDrawing(std::shared_ptr<CoreController> controller) {
 	m_painter->setContext(controller);
 	m_painter->setMessagePainter(messagePainter());
 	m_context = controller;
-	if (videoProxy()) {
-		videoProxy()->moveToThread(&m_drawThread);
-	}
 
 	lockAspectRatio(isAspectRatioLocked());
 	lockIntegerScaling(isIntegerScalingLocked());
@@ -411,11 +418,34 @@ bool DisplayGL::shouldDisableUpdates() {
 void DisplayGL::setVideoProxy(std::shared_ptr<VideoProxy> proxy) {
 	Display::setVideoProxy(proxy);
 	if (proxy) {
-		proxy->moveToThread(&m_drawThread);
+		proxy->moveToThread(&m_proxyThread);
 	}
 	m_painter->setVideoProxy(proxy);
 }
 
+void DisplayGL::setupProxyThread() {
+	m_proxyContext->moveToThread(&m_proxyThread);
+	connect(&m_proxyThread, &QThread::started, m_proxyContext.get(), [this]() {
+		m_proxyContext->setShareContext(m_painter->shareContext());
+		m_proxyContext->create();
+		m_proxySurface.create();
+		m_proxyContext->makeCurrent(&m_proxySurface);
+#if defined(_WIN32) && defined(USE_EPOXY)
+		epoxy_handle_external_wglMakeCurrent();
+#endif
+	});
+	connect(m_painter.get(), &PainterGL::texSwapped, m_proxyContext.get(), [this]() {
+		if (!m_context->hardwareAccelerated()) {
+			return;
+		}
+		if (videoProxy()) {
+			videoProxy()->processData();
+		}
+		m_painter->updateFramebufferHandle();
+	}, Qt::BlockingQueuedConnection);
+	m_proxyThread.start();
+}
+
 int DisplayGL::framebufferHandle() {
 	return m_painter->glTex();
 }
@@ -481,9 +511,15 @@ void PainterGL::create() {
 
 #if defined(BUILD_GLES2) || defined(BUILD_GLES3)
 	if (m_supportsShaders) {
+		QOpenGLFunctions_Baseline* fn = m_gl->versionFunctions<QOpenGLFunctions_Baseline>();
 		gl2Backend = static_cast<mGLES2Context*>(malloc(sizeof(mGLES2Context)));
 		mGLES2ContextCreate(gl2Backend);
 		m_backend = &gl2Backend->d;
+		fn->glGenTextures(m_bridgeTexes.size(), m_bridgeTexes.data());
+		for (auto tex : m_bridgeTexes) {
+			m_freeTex.enqueue(tex);
+		}
+		m_bridgeTexIn = m_freeTex.dequeue();
 	}
 #endif
 
@@ -503,10 +539,10 @@ void PainterGL::create() {
 		painter->makeCurrent();
 
 #if defined(BUILD_GLES2) || defined(BUILD_GLES3)
+		mGLES2Context* gl2Backend = reinterpret_cast<mGLES2Context*>(painter->m_backend);
 		if (painter->m_widget && painter->supportsShaders()) {
 			QOpenGLFunctions_Baseline* fn = painter->m_gl->versionFunctions<QOpenGLFunctions_Baseline>();
 			fn->glFinish();
-			mGLES2Context* gl2Backend = reinterpret_cast<mGLES2Context*>(painter->m_backend);
 			painter->m_widget->setTex(painter->m_finalTex[painter->m_finalTexIdx]);
 			painter->m_finalTexIdx ^= 1;
 			gl2Backend->finalShader.tex = painter->m_finalTex[painter->m_finalTexIdx];
@@ -540,6 +576,8 @@ void PainterGL::create() {
 	m_backend->filter = false;
 	m_backend->lockAspectRatio = false;
 	m_backend->interframeBlending = false;
+
+	emit created();
 }
 
 void PainterGL::destroy() {
@@ -548,9 +586,11 @@ void PainterGL::destroy() {
 	}
 	makeCurrent();
 #if defined(BUILD_GLES2) || defined(BUILD_GLES3)
+	QOpenGLFunctions_Baseline* fn = m_gl->versionFunctions<QOpenGLFunctions_Baseline>();
 	if (m_shader.passes) {
 		mGLES2ShaderFree(&m_shader);
 	}
+	fn->glDeleteTextures(m_bridgeTexes.size(), m_bridgeTexes.data());
 #endif
 	m_backend->deinit(m_backend);
 	m_gl->doneCurrent();
@@ -636,6 +676,7 @@ void PainterGL::start() {
 	}
 #endif
 	resizeContext();
+	m_context->addFrameAction(std::bind(&PainterGL::swapTex, this));
 
 	m_buffer = nullptr;
 	m_active = true;
@@ -644,7 +685,7 @@ void PainterGL::start() {
 }
 
 void PainterGL::draw() {
-	if (!m_started || m_queue.isEmpty()) {
+	if (!m_started || (m_queue.isEmpty() && m_queueTex.isEmpty())) {
 		return;
 	}
 
@@ -671,7 +712,7 @@ void PainterGL::draw() {
 		return;
 	}
 	dequeue();
-	bool forceRedraw = !m_videoProxy;
+	bool forceRedraw = true;
 	if (!m_delayTimer.isValid()) {
 		m_delayTimer.start();
 	} else {
@@ -725,11 +766,6 @@ void PainterGL::doStop() {
 			m_videoProxy->processData();
 		}
 	}
-	if (m_videoProxy) {
-		m_videoProxy->reset();
-		m_videoProxy->moveToThread(m_window->thread());
-		m_videoProxy.reset();
-	}
 	m_backend->clear(m_backend);
 	m_backend->swap(m_backend);
 }
@@ -759,38 +795,60 @@ void PainterGL::performDraw() {
 }
 
 void PainterGL::enqueue(const uint32_t* backing) {
+	if (!backing) {
+		return;
+	}
 	QMutexLocker locker(&m_mutex);
 	uint32_t* buffer = nullptr;
-	if (backing) {
-		if (m_free.isEmpty()) {
-			buffer = m_queue.dequeue();
-		} else {
-			buffer = m_free.takeLast();
-		}
-		if (buffer) {
-			QSize size = m_context->screenDimensions();
-			memcpy(buffer, backing, size.width() * size.height() * BYTES_PER_PIXEL);
-		}
+	if (m_free.isEmpty()) {
+		buffer = m_queue.dequeue();
+	} else {
+		buffer = m_free.takeLast();
+	}
+	if (buffer) {
+		QSize size = m_context->screenDimensions();
+		memcpy(buffer, backing, size.width() * size.height() * BYTES_PER_PIXEL);
 	}
 	m_queue.enqueue(buffer);
 }
 
+void PainterGL::enqueue(GLuint tex) {
+	QMutexLocker locker(&m_mutex);
+	if (m_freeTex.isEmpty()) {
+		m_bridgeTexIn = m_queueTex.dequeue();
+	} else {
+		m_bridgeTexIn = m_freeTex.takeLast();
+	}
+	m_queueTex.enqueue(tex);
+}
+
 void PainterGL::dequeue() {
 	QMutexLocker locker(&m_mutex);
-	if (m_queue.isEmpty()) {
-		return;
+	if (!m_queue.isEmpty()) {
+		uint32_t* buffer = m_queue.dequeue();
+		if (m_buffer) {
+			m_free.append(m_buffer);
+		}
+		m_buffer = buffer;
 	}
-	uint32_t* buffer = m_queue.dequeue();
-	if (m_buffer) {
-		m_free.append(m_buffer);
-		m_buffer = nullptr;
+
+	if (!m_queueTex.isEmpty()) {
+		if (m_bridgeTexOut != std::numeric_limits<GLuint>::max()) {
+			m_freeTex.enqueue(m_bridgeTexOut);
+		}
+		m_bridgeTexOut = m_queueTex.dequeue();
+#if defined(BUILD_GLES2) || defined(BUILD_GLES3)
+		if (supportsShaders()) {
+			mGLES2Context* gl2Backend = reinterpret_cast<mGLES2Context*>(m_backend);
+			gl2Backend->tex = m_bridgeTexOut;
+		}
+#endif
 	}
-	m_buffer = buffer;
 }
 
 void PainterGL::dequeueAll(bool keep) {
 	QMutexLocker locker(&m_mutex);
-	uint32_t* buffer = 0;
+	uint32_t* buffer = nullptr;
 	while (!m_queue.isEmpty()) {
 		buffer = m_queue.dequeue();
 		if (keep) {
@@ -802,6 +860,13 @@ void PainterGL::dequeueAll(bool keep) {
 			m_free.append(buffer);
 		}
 	}
+	m_queueTex.clear();
+	m_freeTex.clear();
+	for (auto tex : m_bridgeTexes) {
+		m_freeTex.enqueue(tex);
+	}
+	m_bridgeTexIn = m_freeTex.dequeue();
+	m_bridgeTexOut = std::numeric_limits<GLuint>::max();
 	if (m_buffer && !keep) {
 		m_free.append(m_buffer);
 		m_buffer = nullptr;
@@ -861,4 +926,29 @@ int PainterGL::glTex() {
 #endif
 }
 
+QOpenGLContext* PainterGL::shareContext() {
+	if (m_widget) {
+		return m_widget->context();
+	} else {
+		return m_gl.get();
+	}
+}
+
+void PainterGL::updateFramebufferHandle() {
+	QOpenGLFunctions_Baseline* fn = m_gl->versionFunctions<QOpenGLFunctions_Baseline>();
+	fn->glFinish();
+	enqueue(m_bridgeTexIn);
+	m_context->setFramebufferHandle(m_bridgeTexIn);
+}
+
+void PainterGL::swapTex() {
+	if (!m_started) {
+		return;
+	}
+
+	CoreController::Interrupter interrupter(m_context);
+	emit texSwapped();
+	m_context->addFrameAction(std::bind(&PainterGL::swapTex, this));
+}
+
 #endif
diff --git a/src/platform/qt/DisplayGL.h b/src/platform/qt/DisplayGL.h
index 77ea6d195..3ed31a9d8 100644
--- a/src/platform/qt/DisplayGL.h
+++ b/src/platform/qt/DisplayGL.h
@@ -112,6 +112,9 @@ protected:
 	virtual void paintEvent(QPaintEvent*) override { forceDraw(); }
 	virtual void resizeEvent(QResizeEvent*) override;
 
+private slots:
+	void setupProxyThread();
+
 private:
 	void resizePainter();
 	bool shouldDisableUpdates();
@@ -122,8 +125,11 @@ private:
 	bool m_hasStarted = false;
 	std::unique_ptr<PainterGL> m_painter;
 	QThread m_drawThread;
+	QThread m_proxyThread;
 	std::shared_ptr<CoreController> m_context;
 	mGLWidget* m_gl;
+	QOffscreenSurface m_proxySurface;
+	std::unique_ptr<QOpenGLContext> m_proxyContext;
 };
 
 class PainterGL : public QObject {
@@ -137,15 +143,21 @@ public:
 	void setContext(std::shared_ptr<CoreController>);
 	void setMessagePainter(MessagePainter*);
 	void enqueue(const uint32_t* backing);
+	void enqueue(GLuint tex);
 
 	void stop();
 
 	bool supportsShaders() const { return m_supportsShaders; }
 	int glTex();
 
+	QOpenGLContext* shareContext();
+
 	void setVideoProxy(std::shared_ptr<VideoProxy>);
 	void interrupt();
 
+	// Run on main thread
+	void swapTex();
+
 public slots:
 	void create();
 	void destroy();
@@ -163,13 +175,16 @@ public slots:
 	void showFrameCounter(bool enable);
 	void filter(bool filter);
 	void resizeContext();
+	void updateFramebufferHandle();
 
 	void setShaders(struct VDir*);
 	void clearShaders();
 	VideoShader* shaders();
 
 signals:
+	void created();
 	void started();
+	void texSwapped();
 
 private slots:
 	void doStop();
@@ -184,6 +199,14 @@ private:
 	QList<uint32_t*> m_free;
 	QQueue<uint32_t*> m_queue;
 	uint32_t* m_buffer = nullptr;
+
+	std::array<GLuint, 3> m_bridgeTexes;
+	QQueue<GLuint> m_freeTex;
+	QQueue<GLuint> m_queueTex;
+
+	GLuint m_bridgeTexIn = std::numeric_limits<GLuint>::max();
+	GLuint m_bridgeTexOut = std::numeric_limits<GLuint>::max();
+
 	QPainter m_painter;
 	QMutex m_mutex;
 	QWindow* m_window;

From 227bf10ee37ea3abda079df33d83f5968aeeecbc Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sun, 27 Nov 2022 20:08:20 -0800
Subject: [PATCH 18/37] Qt: Don't re-enable sync if GBA link modes aren't the
 same (fixes #2044)

---
 CHANGES                                   | 1 +
 src/platform/qt/MultiplayerController.cpp | 6 ------
 2 files changed, 1 insertion(+), 6 deletions(-)

diff --git a/CHANGES b/CHANGES
index 73b7ac5de..5f5175b0d 100644
--- a/CHANGES
+++ b/CHANGES
@@ -7,6 +7,7 @@ Other fixes:
  - Qt: Manually split filename to avoid overzealous splitting (fixes mgba.io/i/2681)
  - Qt: Expand criteria for tag branch names (fixes mgba.io/i/2679)
  - Qt: Fix scanning specific e-Reader dotcodes (fixes mgba.io/i/2693)
+ - Qt: Don't re-enable sync if GBA link modes aren't the same (fixes mgba.io/i/2044)
  - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)
  - VFS: Fix minizip write returning 0 on success instead of size
 Misc:
diff --git a/src/platform/qt/MultiplayerController.cpp b/src/platform/qt/MultiplayerController.cpp
index 7f29100bd..417f9cb50 100644
--- a/src/platform/qt/MultiplayerController.cpp
+++ b/src/platform/qt/MultiplayerController.cpp
@@ -75,12 +75,6 @@ MultiplayerController::MultiplayerController() {
 		if (!id) {
 			for (int i = 1; i < controller->m_players.count(); ++i) {
 				Player* player = &controller->m_players[i];
-#ifdef M_CORE_GBA
-				if (player->controller->platform() == mPLATFORM_GBA && player->gbaNode->d.p->mode != controller->m_players[0].gbaNode->d.p->mode) {
-					player->controller->setSync(true);
-					continue;
-				}
-#endif
 				player->controller->setSync(false);
 				player->cyclesPosted += cycles;
 				if (player->awake < 1) {

From cd72b36e0ba2412e768f5f557d9a54f16ba0a488 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Mon, 28 Nov 2022 00:59:36 -0800
Subject: [PATCH 19/37] GB SIO: Further fix bidirectional transfer starting

---
 CHANGES               |  1 +
 src/gb/sio/lockstep.c | 34 +++++++++++++++++++++++-----------
 2 files changed, 24 insertions(+), 11 deletions(-)

diff --git a/CHANGES b/CHANGES
index 5f5175b0d..97dd7d1bf 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,6 +1,7 @@
 0.10.1: (Future)
 Emulation fixes:
  - GB Serialize: Don't write BGP/OBP when loading SCGB state (fixes mgba.io/i/2694)
+ - GB SIO: Further fix bidirectional transfer starting
  - GBA: Fix resetting key IRQ state (fixes mgba.io/i/2716)
  - GBA Video: Ignore disabled backgrounds as OBJ blend target (fixes mgba.io/i/2489)
 Other fixes:
diff --git a/src/gb/sio/lockstep.c b/src/gb/sio/lockstep.c
index 4d1f1f549..b8dccf891 100644
--- a/src/gb/sio/lockstep.c
+++ b/src/gb/sio/lockstep.c
@@ -157,7 +157,7 @@ static int32_t _masterUpdate(struct GBSIOLockstepNode* node) {
 		}
 	}
 	// Tell the other GBs they can continue up to where we were
-	node->p->d.addCycles(&node->p->d, node->id, node->eventDiff);
+	node->p->d.addCycles(&node->p->d, 0, node->eventDiff);
 #ifndef NDEBUG
 	node->phase = node->p->d.transferActive;
 #endif
@@ -169,26 +169,28 @@ static int32_t _masterUpdate(struct GBSIOLockstepNode* node) {
 
 static uint32_t _slaveUpdate(struct GBSIOLockstepNode* node) {
 	enum mLockstepPhase transferActive;
+	int id;
 
 	ATOMIC_LOAD(transferActive, node->p->d.transferActive);
+	ATOMIC_LOAD(id, node->id);
 
 	bool signal = false;
 	switch (transferActive) {
 	case TRANSFER_IDLE:
-		node->p->d.addCycles(&node->p->d, node->id, LOCKSTEP_INCREMENT);
+		node->p->d.addCycles(&node->p->d, id, LOCKSTEP_INCREMENT);
 		break;
 	case TRANSFER_STARTING:
 	case TRANSFER_FINISHING:
 		break;
 	case TRANSFER_STARTED:
-		if (node->p->d.unusedCycles(&node->p->d, node->id) > node->eventDiff) {
+		if (node->p->d.unusedCycles(&node->p->d, id) > node->eventDiff) {
 			break;
 		}
 		node->transferFinished = false;
 		signal = true;
 		break;
 	case TRANSFER_FINISHED:
-		if (node->p->d.unusedCycles(&node->p->d, node->id) > node->eventDiff) {
+		if (node->p->d.unusedCycles(&node->p->d, id) > node->eventDiff) {
 			break;
 		}
 		_finishTransfer(node);
@@ -199,7 +201,7 @@ static uint32_t _slaveUpdate(struct GBSIOLockstepNode* node) {
 	node->phase = node->p->d.transferActive;
 #endif
 	if (signal) {
-		node->p->d.signal(&node->p->d, 1 << node->id);
+		node->p->d.signal(&node->p->d, 1 << id);
 	}
 	return 0;
 }
@@ -215,11 +217,13 @@ static void _GBSIOLockstepNodeProcessEvents(struct mTiming* timing, void* user,
 	int32_t cycles = 0;
 	node->nextEvent -= cyclesLate;
 	if (node->nextEvent <= 0) {
-		if (!node->id) {
+		int id;
+		ATOMIC_LOAD(id, node->id);
+		if (!id) {
 			cycles = _masterUpdate(node);
 		} else {
 			cycles = _slaveUpdate(node);
-			cycles += node->p->d.useCycles(&node->p->d, node->id, node->eventDiff);
+			cycles += node->p->d.useCycles(&node->p->d, id, node->eventDiff);
 		}
 		node->eventDiff = 0;
 	} else {
@@ -240,7 +244,9 @@ static void _GBSIOLockstepNodeProcessEvents(struct mTiming* timing, void* user,
 
 static void GBSIOLockstepNodeWriteSB(struct GBSIODriver* driver, uint8_t value) {
 	struct GBSIOLockstepNode* node = (struct GBSIOLockstepNode*) driver;
-	node->p->pendingSB[node->id] = value;
+	int id;
+	ATOMIC_LOAD(id, node->id);
+	node->p->pendingSB[id] = value;
 }
 
 static uint8_t GBSIOLockstepNodeWriteSC(struct GBSIODriver* driver, uint8_t value) {
@@ -252,11 +258,17 @@ static uint8_t GBSIOLockstepNodeWriteSC(struct GBSIODriver* driver, uint8_t valu
 		mLockstepLock(&node->p->d);
 		bool claimed = false;
 		if (ATOMIC_CMPXCHG(node->p->masterClaimed, claimed, true)) {
-			if (node->id != 0) {
+			int id;
+			ATOMIC_LOAD(id, node->id);
+			if (id != 0) {
+				unsigned sb;
 				node->p->players[0]->id = 1;
-				node->p->players[1] = node->p->players[0];
-				node->p->players[0] = node->p->players[1];
 				node->id = 0;
+				node->p->players[1] = node->p->players[0];
+				node->p->players[0] = node;
+				sb = node->p->pendingSB[0];
+				node->p->pendingSB[0] = node->p->pendingSB[1];
+				node->p->pendingSB[1] = sb;
 			}
 			ATOMIC_STORE(node->p->d.transferActive, TRANSFER_STARTING);
 			ATOMIC_STORE(node->p->d.transferCycles, GBSIOCyclesPerTransfer[(value >> 1) & 1]);

From 465748f9945ad2969e6d74af30b56a7bf08d170e Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Mon, 28 Nov 2022 01:00:59 -0800
Subject: [PATCH 20/37] Qt: Improve handling of multiplayer syncing (fixes
 #2720)

---
 CHANGES                                   |   1 +
 src/platform/qt/MultiplayerController.cpp | 128 ++++++++++++++++------
 src/platform/qt/MultiplayerController.h   |  17 ++-
 3 files changed, 109 insertions(+), 37 deletions(-)

diff --git a/CHANGES b/CHANGES
index 97dd7d1bf..bd503c1c9 100644
--- a/CHANGES
+++ b/CHANGES
@@ -9,6 +9,7 @@ Other fixes:
  - Qt: Expand criteria for tag branch names (fixes mgba.io/i/2679)
  - Qt: Fix scanning specific e-Reader dotcodes (fixes mgba.io/i/2693)
  - Qt: Don't re-enable sync if GBA link modes aren't the same (fixes mgba.io/i/2044)
+ - Qt: Improve handling of multiplayer syncing (fixes mgba.io/i/2720)
  - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)
  - VFS: Fix minizip write returning 0 on success instead of size
 Misc:
diff --git a/src/platform/qt/MultiplayerController.cpp b/src/platform/qt/MultiplayerController.cpp
index 417f9cb50..f44323603 100644
--- a/src/platform/qt/MultiplayerController.cpp
+++ b/src/platform/qt/MultiplayerController.cpp
@@ -14,24 +14,46 @@
 #include <mgba/internal/gb/gb.h>
 #endif
 
+#include <algorithm>
+
 using namespace QGBA;
 
 #ifdef M_CORE_GB
-MultiplayerController::Player::Player(CoreController* coreController, GBSIOLockstepNode* node)
+MultiplayerController::Player::Player(CoreController* coreController, GBSIOLockstepNode* gbNode)
 	: controller(coreController)
-	, gbNode(node)
 {
+	node.gb = gbNode;
 }
 #endif
 
 #ifdef M_CORE_GBA
-MultiplayerController::Player::Player(CoreController* coreController, GBASIOLockstepNode* node)
+MultiplayerController::Player::Player(CoreController* coreController, GBASIOLockstepNode* gbaNode)
 	: controller(coreController)
-	, gbaNode(node)
 {
+	node.gba = gbaNode;
 }
 #endif
 
+int MultiplayerController::Player::id() const {
+	switch (controller->platform()) {
+#ifdef M_CORE_GBA
+	case mPLATFORM_GBA:
+		return node.gba->id;
+#endif
+#ifdef M_CORE_GB
+	case mPLATFORM_GB:
+		return node.gb->id;
+#endif
+	case mPLATFORM_NONE:
+		break;
+	}
+	return -1;
+}
+
+bool MultiplayerController::Player::operator<(const MultiplayerController::Player& other) const {
+	return id() < other.id();
+}
+
 MultiplayerController::MultiplayerController() {
 	mLockstepInit(&m_lockstep);
 	m_lockstep.context = this;
@@ -65,6 +87,7 @@ MultiplayerController::MultiplayerController() {
 			player->awake = 0;
 			slept = true;
 		}
+		player->controller->setSync(true);
 		return slept;
 	};
 	m_lockstep.addCycles = [](mLockstep* lockstep, int id, int32_t cycles) {
@@ -72,38 +95,51 @@ MultiplayerController::MultiplayerController() {
 			abort();
 		}
 		MultiplayerController* controller = static_cast<MultiplayerController*>(lockstep->context);
-		if (!id) {
-			for (int i = 1; i < controller->m_players.count(); ++i) {
-				Player* player = &controller->m_players[i];
-				player->controller->setSync(false);
-				player->cyclesPosted += cycles;
-				if (player->awake < 1) {
-					switch (player->controller->platform()) {
+		Player* player = controller->player(id);
+		switch (player->controller->platform()) {
 #ifdef M_CORE_GBA
-					case mPLATFORM_GBA:
-						player->gbaNode->nextEvent += player->cyclesPosted;
-						break;
-#endif
-#ifdef M_CORE_GB
-					case mPLATFORM_GB:
-						player->gbNode->nextEvent += player->cyclesPosted;
-						break;
-#endif
-					default:
-						break;
+		case mPLATFORM_GBA:
+			if (!id) {
+				for (int i = 1; i < controller->m_players.count(); ++i) {
+					player = controller->player(i);
+					player->controller->setSync(false);
+					player->cyclesPosted += cycles;
+					if (player->awake < 1) {
+						player->node.gba->nextEvent += player->cyclesPosted;
 					}
 					mCoreThreadStopWaiting(player->controller->thread());
 					player->awake = 1;
 				}
+			} else {
+				player->controller->setSync(true);
+				player->cyclesPosted += cycles;
 			}
-		} else {
-			controller->m_players[id].controller->setSync(true);
-			controller->m_players[id].cyclesPosted += cycles;
+			break;
+#endif
+#ifdef M_CORE_GB
+		case mPLATFORM_GB:
+			if (!id) {
+				player = controller->player(1);
+				player->controller->setSync(false);
+				player->cyclesPosted += cycles;
+				if (player->awake < 1) {
+					player->node.gb->nextEvent += player->cyclesPosted;
+				}
+				mCoreThreadStopWaiting(player->controller->thread());
+				player->awake = 1;
+			} else {
+				player->controller->setSync(true);
+				player->cyclesPosted += cycles;
+			}
+			break;
+#endif
+		default:
+			break;
 		}
 	};
 	m_lockstep.useCycles = [](mLockstep* lockstep, int id, int32_t cycles) {
 		MultiplayerController* controller = static_cast<MultiplayerController*>(lockstep->context);
-		Player* player = &controller->m_players[id];
+		Player* player = controller->player(id);
 		player->cyclesPosted -= cycles;
 		if (player->cyclesPosted <= 0) {
 			mCoreThreadWaitFromThread(player->controller->thread());
@@ -112,21 +148,21 @@ MultiplayerController::MultiplayerController() {
 		cycles = player->cyclesPosted;
 		return cycles;
 	};
-	m_lockstep.unusedCycles= [](mLockstep* lockstep, int id) {
+	m_lockstep.unusedCycles = [](mLockstep* lockstep, int id) {
 		MultiplayerController* controller = static_cast<MultiplayerController*>(lockstep->context);
-		Player* player = &controller->m_players[id];
+		Player* player = controller->player(id);
 		auto cycles = player->cyclesPosted;
 		return cycles;
 	};
 	m_lockstep.unload = [](mLockstep* lockstep, int id) {
 		MultiplayerController* controller = static_cast<MultiplayerController*>(lockstep->context);
 		if (id) {
-			Player* player = &controller->m_players[id];
+			Player* player = controller->player(id);
 			player->controller->setSync(true);
 			player->cyclesPosted = 0;
 
 			// release master GBA if it is waiting for this GBA
-			player = &controller->m_players[0];
+			player = controller->player(0);
 			player->waitMask &= ~(1 << id);
 			if (!player->waitMask && player->awake < 1) {
 				mCoreThreadStopWaiting(player->controller->thread());
@@ -134,7 +170,7 @@ MultiplayerController::MultiplayerController() {
 			}
 		} else {
 			for (int i = 1; i < controller->m_players.count(); ++i) {
-				Player* player = &controller->m_players[i];
+				Player* player = controller->player(i);
 				player->controller->setSync(true);
 				switch (player->controller->platform()) {
 #ifdef M_CORE_GBA
@@ -154,12 +190,12 @@ MultiplayerController::MultiplayerController() {
 					switch (player->controller->platform()) {
 #ifdef M_CORE_GBA
 					case mPLATFORM_GBA:
-						player->gbaNode->nextEvent += player->cyclesPosted;
+						player->node.gba->nextEvent += player->cyclesPosted;
 						break;
 #endif
 #ifdef M_CORE_GB
 					case mPLATFORM_GB:
-						player->gbNode->nextEvent += player->cyclesPosted;
+						player->node.gb->nextEvent += player->cyclesPosted;
 						break;
 #endif
 					default:
@@ -309,3 +345,29 @@ int MultiplayerController::attached() {
 	num = m_lockstep.attached;
 	return num;
 }
+
+MultiplayerController::Player* MultiplayerController::player(int id) {
+	Player* player = &m_players[id];
+	switch (player->controller->platform()) {
+#ifdef M_CORE_GBA
+	case mPLATFORM_GBA:
+		if (player->node.gba->id != id) {
+			std::sort(m_players.begin(), m_players.end());
+			player = &m_players[id];
+		}
+		break;
+#endif
+#ifdef M_CORE_GB
+	case mPLATFORM_GB:
+		if (player->node.gb->id != id) {
+			std::swap(m_players[0], m_players[1]);
+			player = &m_players[id];
+		}
+		break;
+#endif
+	case mPLATFORM_NONE:
+		break;
+	}
+
+	return player;
+}
diff --git a/src/platform/qt/MultiplayerController.h b/src/platform/qt/MultiplayerController.h
index 03aad86d8..2eb9ab20a 100644
--- a/src/platform/qt/MultiplayerController.h
+++ b/src/platform/qt/MultiplayerController.h
@@ -6,8 +6,8 @@
 #pragma once
 
 #include <QMutex>
-#include <QList>
 #include <QObject>
+#include <QVector>
 
 #include <mgba/core/lockstep.h>
 #ifdef M_CORE_GBA
@@ -44,6 +44,10 @@ signals:
 	void gameDetached();
 
 private:
+	union Node {
+		GBSIOLockstepNode* gb;
+		GBASIOLockstepNode* gba;
+	};
 	struct Player {
 #ifdef M_CORE_GB
 		Player(CoreController* controller, GBSIOLockstepNode* node);
@@ -52,13 +56,18 @@ private:
 		Player(CoreController* controller, GBASIOLockstepNode* node);
 #endif
 
+		int id() const;
+		bool operator<(const Player&) const;
+
 		CoreController* controller;
-		GBSIOLockstepNode* gbNode = nullptr;
-		GBASIOLockstepNode* gbaNode = nullptr;
+		Node node = {nullptr};
 		int awake = 1;
 		int32_t cyclesPosted = 0;
 		unsigned waitMask = 0;
 	};
+
+	Player* player(int id);
+
 	union {
 		mLockstep m_lockstep;
 #ifdef M_CORE_GB
@@ -68,7 +77,7 @@ private:
 		GBASIOLockstep m_gbaLockstep;
 #endif
 	};
-	QList<Player> m_players;
+	QVector<Player> m_players;
 	QMutex m_lock;
 };
 

From 375e09731698a91e5f77c9f8380ce47e1c32b9fd Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Mon, 28 Nov 2022 14:25:04 -0800
Subject: [PATCH 21/37] Qt: Fix build on older Qt

---
 src/platform/qt/MultiplayerController.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/platform/qt/MultiplayerController.h b/src/platform/qt/MultiplayerController.h
index 2eb9ab20a..5ad6124db 100644
--- a/src/platform/qt/MultiplayerController.h
+++ b/src/platform/qt/MultiplayerController.h
@@ -5,9 +5,9 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 #pragma once
 
+#include <QList>
 #include <QMutex>
 #include <QObject>
-#include <QVector>
 
 #include <mgba/core/lockstep.h>
 #ifdef M_CORE_GBA
@@ -77,7 +77,7 @@ private:
 		GBASIOLockstep m_gbaLockstep;
 #endif
 	};
-	QVector<Player> m_players;
+	QList<Player> m_players;
 	QMutex m_lock;
 };
 

From 096bda8b48115194db0705374fed04a611a48302 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Mon, 28 Nov 2022 22:37:31 -0800
Subject: [PATCH 22/37] GB Audio: Fix channels 1/2 not playing when resetting
 volume (fixes #2614)

---
 CHANGES        | 1 +
 src/gb/audio.c | 6 +++---
 2 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/CHANGES b/CHANGES
index bd503c1c9..d0f43ef31 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,5 +1,6 @@
 0.10.1: (Future)
 Emulation fixes:
+ - GB Audio: Fix channels 1/2 not playing when resetting volume (fixes mgba.io/i/2614)
  - GB Serialize: Don't write BGP/OBP when loading SCGB state (fixes mgba.io/i/2694)
  - GB SIO: Further fix bidirectional transfer starting
  - GBA: Fix resetting key IRQ state (fixes mgba.io/i/2716)
diff --git a/src/gb/audio.c b/src/gb/audio.c
index 0b6a03ecb..26675a983 100644
--- a/src/gb/audio.c
+++ b/src/gb/audio.c
@@ -480,7 +480,7 @@ void GBAudioRun(struct GBAudio* audio, int32_t timestamp, int channels) {
 		GBAudioSample(audio, timestamp);
 	}
 
-	if (audio->playingCh1 && (channels & 0x1)) {
+	if (audio->playingCh1 && (channels & 0x1) && audio->ch1.envelope.dead != 2) {
 		int period = 4 * (2048 - audio->ch1.control.frequency) * audio->timingFactor;
 		int32_t diff = timestamp - audio->ch1.lastUpdate;
 		if (diff >= period) {
@@ -490,7 +490,7 @@ void GBAudioRun(struct GBAudio* audio, int32_t timestamp, int channels) {
 			_updateSquareSample(&audio->ch1);
 		}
 	}
-	if (audio->playingCh2 && (channels & 0x2)) {
+	if (audio->playingCh2 && (channels & 0x2) && audio->ch2.envelope.dead != 2) {
 		int period = 4 * (2048 - audio->ch2.control.frequency) * audio->timingFactor;
 		int32_t diff = timestamp - audio->ch2.lastUpdate;
 		if (diff >= period) {
@@ -863,7 +863,7 @@ bool _writeEnvelope(struct GBAudioEnvelope* envelope, uint8_t value, enum GBAudi
 		envelope->currentVolume &= 0xF;
 	}
 	_updateEnvelopeDead(envelope);
-	return (envelope->initialVolume || envelope->direction) && envelope->dead != 2;
+	return envelope->initialVolume || envelope->direction;
 }
 
 static void _updateSquareSample(struct GBAudioSquareChannel* ch) {

From a83dcefb059bc5376dfd53740caf047ab9b2d2a0 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Wed, 7 Dec 2022 01:21:21 -0800
Subject: [PATCH 23/37] GB Audio: Fix channel 3 volume being changed between
 samples (fixes #1896)

---
 CHANGES        |  1 +
 src/gb/audio.c | 23 +++++++++++++++++++++++
 2 files changed, 24 insertions(+)

diff --git a/CHANGES b/CHANGES
index d0f43ef31..037f18e3d 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,6 +1,7 @@
 0.10.1: (Future)
 Emulation fixes:
  - GB Audio: Fix channels 1/2 not playing when resetting volume (fixes mgba.io/i/2614)
+ - GB Audio: Fix channel 3 volume being changed between samples (fixes mgba.io/i/1896)
  - GB Serialize: Don't write BGP/OBP when loading SCGB state (fixes mgba.io/i/2694)
  - GB SIO: Further fix bidirectional transfer starting
  - GBA: Fix resetting key IRQ state (fixes mgba.io/i/2716)
diff --git a/src/gb/audio.c b/src/gb/audio.c
index 26675a983..516c6c663 100644
--- a/src/gb/audio.c
+++ b/src/gb/audio.c
@@ -269,6 +269,29 @@ void GBAudioWriteNR31(struct GBAudio* audio, uint8_t value) {
 void GBAudioWriteNR32(struct GBAudio* audio, uint8_t value) {
 	GBAudioRun(audio, mTimingCurrentTime(audio->timing), 0x4);
 	audio->ch3.volume = GBAudioRegisterBankVolumeGetVolumeGB(value);
+
+	audio->ch3.sample = audio->ch3.wavedata8[audio->ch3.window >> 1];
+	if (!(audio->ch3.window & 1)) {
+		audio->ch3.sample >>= 4;
+	}
+	audio->ch3.sample &= 0xF;
+	int volume;
+	switch (audio->ch3.volume) {
+	case 0:
+		volume = 4;
+		break;
+	case 1:
+		volume = 0;
+		break;
+	case 2:
+		volume = 1;
+		break;
+	default:
+	case 3:
+		volume = 2;
+		break;
+	}
+	audio->ch3.sample >>= volume;
 }
 
 void GBAudioWriteNR33(struct GBAudio* audio, uint8_t value) {

From e054e6ee436ada88773fbc46bbcce818897b89b4 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Thu, 8 Dec 2022 01:20:51 -0800
Subject: [PATCH 24/37] GB Memory: Actually, HDMAs should start when LCD is off
 (fixes #2662)

---
 CHANGES         | 1 +
 src/gb/memory.c | 4 +---
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/CHANGES b/CHANGES
index 037f18e3d..dd136d854 100644
--- a/CHANGES
+++ b/CHANGES
@@ -2,6 +2,7 @@
 Emulation fixes:
  - GB Audio: Fix channels 1/2 not playing when resetting volume (fixes mgba.io/i/2614)
  - GB Audio: Fix channel 3 volume being changed between samples (fixes mgba.io/i/1896)
+ - GB Memory: Actually, HDMAs should start when LCD is off (fixes mgba.io/i/2662)
  - GB Serialize: Don't write BGP/OBP when loading SCGB state (fixes mgba.io/i/2694)
  - GB SIO: Further fix bidirectional transfer starting
  - GBA: Fix resetting key IRQ state (fixes mgba.io/i/2716)
diff --git a/src/gb/memory.c b/src/gb/memory.c
index 0c11308fe..c55128405 100644
--- a/src/gb/memory.c
+++ b/src/gb/memory.c
@@ -558,7 +558,7 @@ uint8_t GBMemoryWriteHDMA5(struct GB* gb, uint8_t value) {
 	gb->memory.hdmaDest |= 0x8000;
 	bool wasHdma = gb->memory.isHdma;
 	gb->memory.isHdma = value & 0x80;
-	if ((!wasHdma && !gb->memory.isHdma) || (GBRegisterLCDCIsEnable(gb->memory.io[GB_REG_LCDC]) && gb->video.mode == 0)) {
+	if ((!wasHdma && !gb->memory.isHdma) || gb->video.mode == 0) {
 		if (gb->memory.isHdma) {
 			gb->memory.hdmaRemaining = 0x10;
 		} else {
@@ -566,8 +566,6 @@ uint8_t GBMemoryWriteHDMA5(struct GB* gb, uint8_t value) {
 		}
 		gb->cpuBlocked = true;
 		mTimingSchedule(&gb->timing, &gb->memory.hdmaEvent, 0);
-	} else if (gb->memory.isHdma && !GBRegisterLCDCIsEnable(gb->memory.io[GB_REG_LCDC])) {
-		return 0x80 | ((value + 1) & 0x7F);
 	}
 	return value & 0x7F;
 }

From 08998f6095c17b6d7d7fe4328dfc70d6fe8c2890 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sun, 11 Dec 2022 19:08:53 -0800
Subject: [PATCH 25/37] GB Audio: Fix up boot sequence

---
 CHANGES     |  1 +
 src/gb/gb.c | 21 ++++++++++++++++++++-
 src/gb/io.c | 31 +------------------------------
 3 files changed, 22 insertions(+), 31 deletions(-)

diff --git a/CHANGES b/CHANGES
index dd136d854..b2aa033b8 100644
--- a/CHANGES
+++ b/CHANGES
@@ -2,6 +2,7 @@
 Emulation fixes:
  - GB Audio: Fix channels 1/2 not playing when resetting volume (fixes mgba.io/i/2614)
  - GB Audio: Fix channel 3 volume being changed between samples (fixes mgba.io/i/1896)
+ - GB Audio: Fix up boot sequence
  - GB Memory: Actually, HDMAs should start when LCD is off (fixes mgba.io/i/2662)
  - GB Serialize: Don't write BGP/OBP when loading SCGB state (fixes mgba.io/i/2694)
  - GB SIO: Further fix bidirectional transfer starting
diff --git a/src/gb/gb.c b/src/gb/gb.c
index dc3a37191..a3a870f28 100644
--- a/src/gb/gb.c
+++ b/src/gb/gb.c
@@ -596,13 +596,13 @@ void GBReset(struct SM83Core* cpu) {
 	GBVideoReset(&gb->video);
 	GBTimerReset(&gb->timer);
 	GBIOReset(gb);
+	GBAudioReset(&gb->audio);
 	if (!gb->biosVf && gb->memory.rom) {
 		GBSkipBIOS(gb);
 	} else {
 		mTimingSchedule(&gb->timing, &gb->timer.event, 0);
 	}
 
-	GBAudioReset(&gb->audio);
 	GBSIOReset(&gb->sio);
 
 	cpu->memory.setActiveRegion(cpu, cpu->pc);
@@ -744,6 +744,25 @@ void GBSkipBIOS(struct GB* gb) {
 		GBUnmapBIOS(gb);
 	}
 
+	GBIOWrite(gb, GB_REG_NR52, 0xF1);
+	GBIOWrite(gb, GB_REG_NR14, 0x3F);
+	GBIOWrite(gb, GB_REG_NR10, 0x80);
+	GBIOWrite(gb, GB_REG_NR11, 0xBF);
+	GBIOWrite(gb, GB_REG_NR12, 0xF3);
+	GBIOWrite(gb, GB_REG_NR13, 0xF3);
+	GBIOWrite(gb, GB_REG_NR24, 0x3F);
+	GBIOWrite(gb, GB_REG_NR21, 0x3F);
+	GBIOWrite(gb, GB_REG_NR22, 0x00);
+	GBIOWrite(gb, GB_REG_NR34, 0x3F);
+	GBIOWrite(gb, GB_REG_NR30, 0x7F);
+	GBIOWrite(gb, GB_REG_NR31, 0xFF);
+	GBIOWrite(gb, GB_REG_NR32, 0x9F);
+	GBIOWrite(gb, GB_REG_NR44, 0x3F);
+	GBIOWrite(gb, GB_REG_NR41, 0xFF);
+	GBIOWrite(gb, GB_REG_NR42, 0x00);
+	GBIOWrite(gb, GB_REG_NR43, 0x00);
+	GBIOWrite(gb, GB_REG_NR50, 0x77);
+	GBIOWrite(gb, GB_REG_NR51, 0xF3);
 	GBIOWrite(gb, GB_REG_LCDC, 0x91);
 	gb->memory.io[GB_REG_BANK] = 0x1;
 	GBVideoSkipBIOS(&gb->video);
diff --git a/src/gb/io.c b/src/gb/io.c
index 06a7927cd..511989d0a 100644
--- a/src/gb/io.c
+++ b/src/gb/io.c
@@ -162,36 +162,7 @@ void GBIOReset(struct GB* gb) {
 	GBIOWrite(gb, GB_REG_TMA, 0);
 	GBIOWrite(gb, GB_REG_TAC, 0);
 	GBIOWrite(gb, GB_REG_IF, 1);
-	gb->audio.playingCh1 = false;
-	gb->audio.playingCh2 = false;
-	gb->audio.playingCh3 = false;
-	gb->audio.playingCh4 = false;
-	GBIOWrite(gb, GB_REG_NR52, 0xF1);
-	GBIOWrite(gb, GB_REG_NR14, 0x3F);
-	GBIOWrite(gb, GB_REG_NR10, 0x80);
-	GBIOWrite(gb, GB_REG_NR11, 0xBF);
-	GBIOWrite(gb, GB_REG_NR12, 0xF3);
-	GBIOWrite(gb, GB_REG_NR13, 0xF3);
-	GBIOWrite(gb, GB_REG_NR24, 0x3F);
-	GBIOWrite(gb, GB_REG_NR21, 0x3F);
-	GBIOWrite(gb, GB_REG_NR22, 0x00);
-	GBIOWrite(gb, GB_REG_NR34, 0x3F);
-	GBIOWrite(gb, GB_REG_NR30, 0x7F);
-	GBIOWrite(gb, GB_REG_NR31, 0xFF);
-	GBIOWrite(gb, GB_REG_NR32, 0x9F);
-	GBIOWrite(gb, GB_REG_NR44, 0x3F);
-	GBIOWrite(gb, GB_REG_NR41, 0xFF);
-	GBIOWrite(gb, GB_REG_NR42, 0x00);
-	GBIOWrite(gb, GB_REG_NR43, 0x00);
-	GBIOWrite(gb, GB_REG_NR50, 0x77);
-	GBIOWrite(gb, GB_REG_NR51, 0xF3);
-	if (!gb->biosVf) {
-		GBIOWrite(gb, GB_REG_LCDC, 0x91);
-		gb->memory.io[GB_REG_BANK] = 1;
-	} else {
-		GBIOWrite(gb, GB_REG_LCDC, 0x00);
-		gb->memory.io[GB_REG_BANK] = 0xFF;
-	}
+	GBIOWrite(gb, GB_REG_LCDC, 0x00);
 	GBIOWrite(gb, GB_REG_SCY, 0x00);
 	GBIOWrite(gb, GB_REG_SCX, 0x00);
 	GBIOWrite(gb, GB_REG_LYC, 0x00);

From 9113444c5dc8ab94d8cee350c8873983b7574ea6 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sun, 11 Dec 2022 19:09:21 -0800
Subject: [PATCH 26/37] GB Audio: Fix updating channels other than 2 when
 writing NR5x

---
 CHANGES        | 1 +
 src/gb/audio.c | 4 ++--
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/CHANGES b/CHANGES
index b2aa033b8..db8a0c1ec 100644
--- a/CHANGES
+++ b/CHANGES
@@ -3,6 +3,7 @@ Emulation fixes:
  - GB Audio: Fix channels 1/2 not playing when resetting volume (fixes mgba.io/i/2614)
  - GB Audio: Fix channel 3 volume being changed between samples (fixes mgba.io/i/1896)
  - GB Audio: Fix up boot sequence
+ - GB Audio: Fix updating channels other than 2 when writing NR5x
  - GB Memory: Actually, HDMAs should start when LCD is off (fixes mgba.io/i/2662)
  - GB Serialize: Don't write BGP/OBP when loading SCGB state (fixes mgba.io/i/2694)
  - GB SIO: Further fix bidirectional transfer starting
diff --git a/src/gb/audio.c b/src/gb/audio.c
index 516c6c663..8bce46e07 100644
--- a/src/gb/audio.c
+++ b/src/gb/audio.c
@@ -400,13 +400,13 @@ void GBAudioWriteNR44(struct GBAudio* audio, uint8_t value) {
 }
 
 void GBAudioWriteNR50(struct GBAudio* audio, uint8_t value) {
-	GBAudioRun(audio, mTimingCurrentTime(audio->timing), 0x2);
+	GBAudioRun(audio, mTimingCurrentTime(audio->timing), 0xF);
 	audio->volumeRight = GBRegisterNR50GetVolumeRight(value);
 	audio->volumeLeft = GBRegisterNR50GetVolumeLeft(value);
 }
 
 void GBAudioWriteNR51(struct GBAudio* audio, uint8_t value) {
-	GBAudioRun(audio, mTimingCurrentTime(audio->timing), 0x2);
+	GBAudioRun(audio, mTimingCurrentTime(audio->timing), 0xF);
 	audio->ch1Right = GBRegisterNR51GetCh1Right(value);
 	audio->ch2Right = GBRegisterNR51GetCh2Right(value);
 	audio->ch3Right = GBRegisterNR51GetCh3Right(value);

From 457438367278a8bce5b47bafb62af325ed0e5e2f Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Mon, 12 Dec 2022 03:12:06 -0800
Subject: [PATCH 27/37] Qt: Fix proxy context creation on Nvidia (fixes #2746)

---
 src/platform/qt/DisplayGL.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/platform/qt/DisplayGL.cpp b/src/platform/qt/DisplayGL.cpp
index b8c0f8cd9..9f5729a67 100644
--- a/src/platform/qt/DisplayGL.cpp
+++ b/src/platform/qt/DisplayGL.cpp
@@ -425,10 +425,10 @@ void DisplayGL::setVideoProxy(std::shared_ptr<VideoProxy> proxy) {
 
 void DisplayGL::setupProxyThread() {
 	m_proxyContext->moveToThread(&m_proxyThread);
+	m_proxySurface.create();
 	connect(&m_proxyThread, &QThread::started, m_proxyContext.get(), [this]() {
 		m_proxyContext->setShareContext(m_painter->shareContext());
 		m_proxyContext->create();
-		m_proxySurface.create();
 		m_proxyContext->makeCurrent(&m_proxySurface);
 #if defined(_WIN32) && defined(USE_EPOXY)
 		epoxy_handle_external_wglMakeCurrent();
@@ -576,6 +576,7 @@ void PainterGL::create() {
 	m_backend->filter = false;
 	m_backend->lockAspectRatio = false;
 	m_backend->interframeBlending = false;
+	m_gl->doneCurrent();
 
 	emit created();
 }

From 6cd1c4e5b90971ce1ef75a0d8851b639d44c9ac9 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Mon, 12 Dec 2022 14:31:41 -0800
Subject: [PATCH 28/37] Qt: Fix loading/unloading shaders

---
 src/platform/qt/DisplayGL.cpp | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/src/platform/qt/DisplayGL.cpp b/src/platform/qt/DisplayGL.cpp
index 9f5729a67..3b1c2a695 100644
--- a/src/platform/qt/DisplayGL.cpp
+++ b/src/platform/qt/DisplayGL.cpp
@@ -887,12 +887,20 @@ void PainterGL::setShaders(struct VDir* dir) {
 		return;
 	}
 #if defined(BUILD_GLES2) || defined(BUILD_GLES3)
+	if (!m_started) {
+		makeCurrent();
+	}
+
 	if (m_shader.passes) {
 		mGLES2ShaderDetach(reinterpret_cast<mGLES2Context*>(m_backend));
 		mGLES2ShaderFree(&m_shader);
 	}
 	mGLES2ShaderLoad(&m_shader, dir);
 	mGLES2ShaderAttach(reinterpret_cast<mGLES2Context*>(m_backend), static_cast<mGLES2Shader*>(m_shader.passes), m_shader.nPasses);
+
+	if (!m_started) {
+		m_gl->doneCurrent();
+	}
 #endif
 }
 
@@ -901,10 +909,18 @@ void PainterGL::clearShaders() {
 		return;
 	}
 #if defined(BUILD_GLES2) || defined(BUILD_GLES3)
+	if (!m_started) {
+		makeCurrent();
+	}
+
 	if (m_shader.passes) {
 		mGLES2ShaderDetach(reinterpret_cast<mGLES2Context*>(m_backend));
 		mGLES2ShaderFree(&m_shader);
 	}
+
+	if (!m_started) {
+		m_gl->doneCurrent();
+	}
 #endif
 }
 

From 4b6da4b7dbb178b9440048405ad6f0dbdb8f2c66 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Tue, 13 Dec 2022 15:18:21 -0800
Subject: [PATCH 29/37] GB IO: Fix BANK not getting initialized after recent
 change

---
 src/gb/io.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/gb/io.c b/src/gb/io.c
index 511989d0a..ba4473550 100644
--- a/src/gb/io.c
+++ b/src/gb/io.c
@@ -174,6 +174,7 @@ void GBIOReset(struct GB* gb) {
 	}
 	GBIOWrite(gb, GB_REG_WY, 0x00);
 	GBIOWrite(gb, GB_REG_WX, 0x00);
+	gb->memory.io[GB_REG_BANK] = 0xFF;
 	if (gb->model & GB_MODEL_CGB) {
 		GBIOWrite(gb, GB_REG_KEY0, 0);
 		GBIOWrite(gb, GB_REG_JOYP, 0xFF);

From 443c5516248d8892efbdd2dd5cb8e00bfec8b315 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sat, 17 Dec 2022 00:21:07 -0800
Subject: [PATCH 30/37] Qt: Refactor and fix dequeueAll so keep mode keeps last
 draw tex too

---
 src/platform/qt/DisplayGL.cpp | 16 +++++++++++-----
 1 file changed, 11 insertions(+), 5 deletions(-)

diff --git a/src/platform/qt/DisplayGL.cpp b/src/platform/qt/DisplayGL.cpp
index 3b1c2a695..59a441aca 100644
--- a/src/platform/qt/DisplayGL.cpp
+++ b/src/platform/qt/DisplayGL.cpp
@@ -861,16 +861,22 @@ void PainterGL::dequeueAll(bool keep) {
 			m_free.append(buffer);
 		}
 	}
+	if (m_buffer && !keep) {
+		m_free.append(m_buffer);
+		m_buffer = nullptr;
+	}
+
 	m_queueTex.clear();
 	m_freeTex.clear();
 	for (auto tex : m_bridgeTexes) {
+		if (keep && tex == m_bridgeTexIn) {
+			continue;
+		}
 		m_freeTex.enqueue(tex);
 	}
-	m_bridgeTexIn = m_freeTex.dequeue();
-	m_bridgeTexOut = std::numeric_limits<GLuint>::max();
-	if (m_buffer && !keep) {
-		m_free.append(m_buffer);
-		m_buffer = nullptr;
+	if (!keep) {
+		m_bridgeTexIn = m_freeTex.dequeue();
+		m_bridgeTexOut = std::numeric_limits<GLuint>::max();
 	}
 }
 

From f6f7d03893583bf7791a5f5cecc4013b130f9879 Mon Sep 17 00:00:00 2001
From: CasualPokePlayer <50538166+CasualPokePlayer@users.noreply.github.com>
Date: Fri, 16 Dec 2022 22:12:24 -0800
Subject: [PATCH 31/37] Check gba->mbVf for force skipping the BIOS (#2754)

---
 CHANGES        | 1 +
 src/gba/core.c | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/CHANGES b/CHANGES
index db8a0c1ec..f4c18d107 100644
--- a/CHANGES
+++ b/CHANGES
@@ -10,6 +10,7 @@ Emulation fixes:
  - GBA: Fix resetting key IRQ state (fixes mgba.io/i/2716)
  - GBA Video: Ignore disabled backgrounds as OBJ blend target (fixes mgba.io/i/2489)
 Other fixes:
+ - GBA: Fix forceskip BIOS logic for multiboot ROMs (fixes mgba.io/i/2753)
  - Qt: Manually split filename to avoid overzealous splitting (fixes mgba.io/i/2681)
  - Qt: Expand criteria for tag branch names (fixes mgba.io/i/2679)
  - Qt: Fix scanning specific e-Reader dotcodes (fixes mgba.io/i/2693)
diff --git a/src/gba/core.c b/src/gba/core.c
index 5b134338f..66404f851 100644
--- a/src/gba/core.c
+++ b/src/gba/core.c
@@ -700,7 +700,7 @@ static void _GBACoreReset(struct mCore* core) {
 #endif
 
 	ARMReset(core->cpu);
-	bool forceSkip = gba->romVf && GBAIsMB(gba->romVf);
+	bool forceSkip = gba->mbVf;
 	if (!(forceSkip || core->opts.skipBios) && (gba->romVf || gba->memory.rom) && gba->pristineRomSize >= 0xA0 && gba->biosVf) {
 		uint32_t crc = doCrc32(&gba->memory.rom[1], 0x9C);
 		if (crc != LOGO_CRC32) {

From b4e1b9559d2f51a8fd304de15de42555a4b6d713 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sat, 17 Dec 2022 00:21:07 -0800
Subject: [PATCH 32/37] GBA: Clean up BIOS skip detection; add second multiboot
 entry

---
 src/gba/core.c | 6 +++---
 src/gba/gba.c  | 4 +++-
 2 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/gba/core.c b/src/gba/core.c
index 66404f851..2444a8ae7 100644
--- a/src/gba/core.c
+++ b/src/gba/core.c
@@ -700,8 +700,8 @@ static void _GBACoreReset(struct mCore* core) {
 #endif
 
 	ARMReset(core->cpu);
-	bool forceSkip = gba->mbVf;
-	if (!(forceSkip || core->opts.skipBios) && (gba->romVf || gba->memory.rom) && gba->pristineRomSize >= 0xA0 && gba->biosVf) {
+	bool forceSkip = gba->mbVf || core->opts.skipBios;
+	if (!forceSkip && (gba->romVf || gba->memory.rom) && gba->pristineRomSize >= 0xA0 && gba->biosVf) {
 		uint32_t crc = doCrc32(&gba->memory.rom[1], 0x9C);
 		if (crc != LOGO_CRC32) {
 			mLOG(STATUS, WARN, "Invalid logo, skipping BIOS");
@@ -709,7 +709,7 @@ static void _GBACoreReset(struct mCore* core) {
 		}
 	}
 
-	if (forceSkip || (core->opts.skipBios && (gba->romVf || gba->memory.rom))) {
+	if (forceSkip) {
 		GBASkipBIOS(core->board);
 	}
 
diff --git a/src/gba/gba.c b/src/gba/gba.c
index 42891500e..6b81a99c6 100644
--- a/src/gba/gba.c
+++ b/src/gba/gba.c
@@ -275,8 +275,10 @@ void GBASkipBIOS(struct GBA* gba) {
 	if (cpu->gprs[ARM_PC] == BASE_RESET + WORD_SIZE_ARM) {
 		if (gba->memory.rom) {
 			cpu->gprs[ARM_PC] = BASE_CART0;
-		} else {
+		} else if (gba->memory.wram[0x30]) {
 			cpu->gprs[ARM_PC] = BASE_WORKING_RAM + 0xC0;
+		} else {
+			cpu->gprs[ARM_PC] = BASE_WORKING_RAM;
 		}
 		gba->video.vcount = 0x7E;
 		gba->memory.io[REG_VCOUNT >> 1] = 0x7E;

From be0adc1e238d36312ffd0e537b1be98ccb0a7c6c Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sun, 18 Dec 2022 17:01:01 -0800
Subject: [PATCH 33/37] GBA Video: Fix #2489 in OpenGL renderer

---
 src/gba/renderers/gl.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/gba/renderers/gl.c b/src/gba/renderers/gl.c
index 9d7ccafa7..b6ffa2aac 100644
--- a/src/gba/renderers/gl.c
+++ b/src/gba/renderers/gl.c
@@ -664,10 +664,12 @@ static const char* const _finalize =
 	"	if (((topFlags.y & 13) == 5 || topFlags.w > 0) && (bottomFlags.y & 2) == 2) {\n"
 	"		topPixel.rgb *= float(topFlags.z) / 16.;\n"
 	"		topPixel.rgb += bottomPixel.rgb * float(windowFlags.y) / 16.;\n"
-	"	} else if ((topFlags.y & 13) == 9) {\n"
-	"		topPixel.rgb += (1. - topPixel.rgb) * float(windowFlags.z) / 16.;\n"
-	"	} else if ((topFlags.y & 13) == 13) {\n"
-	"		topPixel.rgb -= topPixel.rgb * float(windowFlags.z) / 16.;\n"
+	"	} else if (topFlags.w == 0) { \n"
+	"		if ((topFlags.y & 13) == 9) {\n"
+	"			topPixel.rgb += (1. - topPixel.rgb) * float(windowFlags.z) / 16.;\n"
+	"		} else if ((topFlags.y & 13) == 13) {\n"
+	"			topPixel.rgb -= topPixel.rgb * float(windowFlags.z) / 16.;\n"
+	"		}\n"
 	"	}\n"
 	"	color = topPixel;\n"
 	"}";

From 51ae0d40a1864cebec87b3a295aa2cae4e21b3f5 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Mon, 12 Dec 2022 03:58:12 -0800
Subject: [PATCH 34/37] Qt: Tentative fix for renderer switching crash

---
 src/platform/qt/DisplayGL.cpp | 5 +++++
 src/platform/qt/Window.cpp    | 2 ++
 2 files changed, 7 insertions(+)

diff --git a/src/platform/qt/DisplayGL.cpp b/src/platform/qt/DisplayGL.cpp
index 59a441aca..86e115517 100644
--- a/src/platform/qt/DisplayGL.cpp
+++ b/src/platform/qt/DisplayGL.cpp
@@ -960,6 +960,11 @@ QOpenGLContext* PainterGL::shareContext() {
 void PainterGL::updateFramebufferHandle() {
 	QOpenGLFunctions_Baseline* fn = m_gl->versionFunctions<QOpenGLFunctions_Baseline>();
 	fn->glFinish();
+
+	CoreController::Interrupter interrupter(m_context);
+	if (!m_context->hardwareAccelerated()) {
+		return;
+	}
 	enqueue(m_bridgeTexIn);
 	m_context->setFramebufferHandle(m_bridgeTexIn);
 }
diff --git a/src/platform/qt/Window.cpp b/src/platform/qt/Window.cpp
index 20249f4a0..e43a9ebd8 100644
--- a/src/platform/qt/Window.cpp
+++ b/src/platform/qt/Window.cpp
@@ -1107,6 +1107,8 @@ void Window::changeRenderer() {
 	if (!m_controller) {
 		return;
 	}
+
+	CoreController::Interrupter interrupter(m_controller);
 	if (m_config->getOption("hwaccelVideo").toInt() && m_display->supportsShaders() && m_controller->supportsFeature(CoreController::Feature::OPENGL)) {
 		std::shared_ptr<VideoProxy> proxy = m_display->videoProxy();
 		if (!proxy) {

From 163d6cdec020a4611d8eb105991ae4804fe8de66 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Sun, 18 Dec 2022 21:48:08 -0800
Subject: [PATCH 35/37] Qt: glFlush is (thankfully) sufficient here

---
 src/platform/qt/DisplayGL.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/platform/qt/DisplayGL.cpp b/src/platform/qt/DisplayGL.cpp
index 86e115517..4b0fcdce3 100644
--- a/src/platform/qt/DisplayGL.cpp
+++ b/src/platform/qt/DisplayGL.cpp
@@ -959,7 +959,7 @@ QOpenGLContext* PainterGL::shareContext() {
 
 void PainterGL::updateFramebufferHandle() {
 	QOpenGLFunctions_Baseline* fn = m_gl->versionFunctions<QOpenGLFunctions_Baseline>();
-	fn->glFinish();
+	fn->glFlush();
 
 	CoreController::Interrupter interrupter(m_context);
 	if (!m_context->hardwareAccelerated()) {

From d810c1ea2448c353908c4d683e19f51833949994 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Wed, 21 Dec 2022 22:13:23 -0800
Subject: [PATCH 36/37] Qt: Start OpenGL bug list with glFlush cross-thread on
 Windows (fixes #2761)

---
 src/platform/qt/CMakeLists.txt |  1 +
 src/platform/qt/DisplayGL.cpp  |  9 ++++++++-
 src/platform/qt/OpenGLBug.cpp  | 34 ++++++++++++++++++++++++++++++++++
 src/platform/qt/OpenGLBug.h    | 17 +++++++++++++++++
 4 files changed, 60 insertions(+), 1 deletion(-)
 create mode 100644 src/platform/qt/OpenGLBug.cpp
 create mode 100644 src/platform/qt/OpenGLBug.h

diff --git a/src/platform/qt/CMakeLists.txt b/src/platform/qt/CMakeLists.txt
index 9b1f60288..204f8e89a 100644
--- a/src/platform/qt/CMakeLists.txt
+++ b/src/platform/qt/CMakeLists.txt
@@ -118,6 +118,7 @@ set(SOURCE_FILES
 	MessagePainter.cpp
 	MultiplayerController.cpp
 	ObjView.cpp
+	OpenGLBug.cpp
 	OverrideView.cpp
 	PaletteView.cpp
 	PlacementControl.cpp
diff --git a/src/platform/qt/DisplayGL.cpp b/src/platform/qt/DisplayGL.cpp
index 4b0fcdce3..0528922fb 100644
--- a/src/platform/qt/DisplayGL.cpp
+++ b/src/platform/qt/DisplayGL.cpp
@@ -44,6 +44,8 @@ using QOpenGLFunctions_Baseline = QOpenGLFunctions_3_2_Core;
 #define OVERHEAD_NSEC 300000
 #endif
 
+#include "OpenGLBug.h"
+
 using namespace QGBA;
 
 QHash<QSurfaceFormat, bool> DisplayGL::s_supports;
@@ -959,7 +961,12 @@ QOpenGLContext* PainterGL::shareContext() {
 
 void PainterGL::updateFramebufferHandle() {
 	QOpenGLFunctions_Baseline* fn = m_gl->versionFunctions<QOpenGLFunctions_Baseline>();
-	fn->glFlush();
+	// TODO: Figure out why glFlush doesn't work here on Intel/Windows
+	if (glContextHasBug(OpenGLBug::CROSS_THREAD_FLUSH)) {
+		fn->glFinish();
+	} else {
+		fn->glFlush();
+	}
 
 	CoreController::Interrupter interrupter(m_context);
 	if (!m_context->hardwareAccelerated()) {
diff --git a/src/platform/qt/OpenGLBug.cpp b/src/platform/qt/OpenGLBug.cpp
new file mode 100644
index 000000000..e00310c56
--- /dev/null
+++ b/src/platform/qt/OpenGLBug.cpp
@@ -0,0 +1,34 @@
+/* Copyright (c) 2013-2022 Jeffrey Pfau
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+#include "OpenGLBug.h"
+
+#include <QOpenGLContext>
+#include <QOpenGLFunctions>
+
+namespace QGBA {
+
+bool glContextHasBug(OpenGLBug bug) {
+	QOpenGLContext* context = QOpenGLContext::currentContext();
+	if (!context) {
+		abort();
+	}
+	QOpenGLFunctions* fn = context->functions();
+	QString vendor(reinterpret_cast<const char*>(fn->glGetString(GL_VENDOR)));
+	QString renderer(reinterpret_cast<const char*>(fn->glGetString(GL_RENDERER)));
+
+	switch (bug) {
+	case OpenGLBug::CROSS_THREAD_FLUSH:
+#ifndef Q_OS_WIN
+		return false;
+#else
+		return vendor == "Intel";
+#endif
+	default:
+		return false;
+	}
+}
+
+}
diff --git a/src/platform/qt/OpenGLBug.h b/src/platform/qt/OpenGLBug.h
new file mode 100644
index 000000000..fda0ed555
--- /dev/null
+++ b/src/platform/qt/OpenGLBug.h
@@ -0,0 +1,17 @@
+/* Copyright (c) 2013-2022 Jeffrey Pfau
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+#pragma once
+
+namespace QGBA {
+
+enum class OpenGLBug {
+    // mgba.io/i/2761
+    CROSS_THREAD_FLUSH
+};
+
+bool glContextHasBug(OpenGLBug);
+
+}

From 86d80e9ccc746375e0350abaf84f5bed3eb1fb32 Mon Sep 17 00:00:00 2001
From: Vicki Pfau <vi@endrift.com>
Date: Thu, 22 Dec 2022 16:02:12 -0800
Subject: [PATCH 37/37] GBA Cheats: Fix issues detecting unencrypted cheats
 (fixes #2724)

---
 CHANGES          | 1 +
 src/gba/cheats.c | 4 ++--
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/CHANGES b/CHANGES
index f4c18d107..362efcfd9 100644
--- a/CHANGES
+++ b/CHANGES
@@ -11,6 +11,7 @@ Emulation fixes:
  - GBA Video: Ignore disabled backgrounds as OBJ blend target (fixes mgba.io/i/2489)
 Other fixes:
  - GBA: Fix forceskip BIOS logic for multiboot ROMs (fixes mgba.io/i/2753)
+ - GBA Cheats: Fix issues detecting unencrypted cheats (fixes mgba.io/i/2724)
  - Qt: Manually split filename to avoid overzealous splitting (fixes mgba.io/i/2681)
  - Qt: Expand criteria for tag branch names (fixes mgba.io/i/2679)
  - Qt: Fix scanning specific e-Reader dotcodes (fixes mgba.io/i/2693)
diff --git a/src/gba/cheats.c b/src/gba/cheats.c
index ec92bc3c2..08848077b 100644
--- a/src/gba/cheats.c
+++ b/src/gba/cheats.c
@@ -126,13 +126,13 @@ static bool GBACheatAddAutodetect(struct GBACheatSet* set, uint32_t op1, uint32_
 			GBACheatSetGameSharkVersion(set, GBA_GS_PARV3);
 		}
 
-		rgsaP = GBACheatGameSharkProbability(op1, op1);
+		rgsaP = GBACheatGameSharkProbability(op1, op2);
 		if (rgsaP > maxProbability) {
 			maxProbability = rgsaP;
 			GBACheatSetGameSharkVersion(set, GBA_GS_GSAV1_RAW);
 		}
 
-		rparP = GBACheatProActionReplayProbability(op1, op1);
+		rparP = GBACheatProActionReplayProbability(op1, op2);
 		if (rparP > maxProbability) {
 			maxProbability = rparP;
 			GBACheatSetGameSharkVersion(set, GBA_GS_PARV3_RAW);
